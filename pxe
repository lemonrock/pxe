#!/usr/bin/env sh
# This file is part of pxe. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/pxe/master/COPYRIGHT. No part of pxe, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of pxe. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/pxe/master/COPYRIGHT.


_program()
{
	core_usesIn pxe
    pxe()
    {
		local functionToExecuteForAction=pxe_action_${pxe_action}
		if ! core_functions_exists "$functionToExecuteForAction"; then
			core_exitError $core_commandLine_exitCode_SOFTWARE "No such action '$pxe_action'"
		fi
	
		pxe_etcFolderPath="$_program_etcPath"/shellfire/pxe
		pxe_httpdFolderPath="$pxe_etcFolderPath"/httpd
		pxe_hitchFilePath="$pxe_etcFolderPath"/hitch.conf
		pxe_openSslCertificateAuthorityCnfFilePath="$pxe_etcFolderPath"/openssl-certificate-authority.cnf
		pxe_certificateAuthorityFolderPath="$pxe_etcFolderPath"/certificate-authority
		pxe_certificatesFolderPath="$pxe_certificateAuthorityFolderPath"/certificates
		pxe_certificateAuthorityCertFilePath="$pxe_certificateAuthorityFolderPath"/private-pxe-certificate-authority.crt
		pxe_certificateAuthorityKeyFilePath="$pxe_certificateAuthorityFolderPath"/private-pxe-certificate-authority.key
		pxe_tftpRootFolderPath="$_program_varPath"/lib/dnsmasq/tftp
		pxe_ethernetInterface='eth0'
		pxe_iPxeConfFolderPath="$_program_etcPath"/shellfire/pxe/ipxe-configuration
		
		
		pxe_iPxeCurrentFolderPath="$_program_etcPath"/shellfire/pxe/iPXE/current
		
		"$functionToExecuteForAction" "$@"
    }
}

_program_commandLine_parse()
{
    if [ $# -eq 0 ]; then
		set -- --help
	fi
	
	case "$1" in
				
		--help|-h|--version)
			:
		;;
		
		dnsmasq)
			local actionMajor="$1"
			shift 1
			
			if [ $# -lt 1 ]; then
				core_exitError $core_commandLine_exitCode_USAGE "Please specify one of start, stop, reconfigure, logrotate or statistics"
			fi
			
			case "$1" in
				
				start|stop|reconfigure|logrotate|statistics)
					pxe_action=${actionMajor}_$1
					shift 1
				;;
				
				*)
					core_exitError $core_commandLine_exitCode_USAGE "Please specify one of start, stop, reconfigure, logrotate or statistics"
				;;
				
			esac
		;;
		
		hitch)
			local actionMajor="$1"
			shift 1
			
			if [ $# -lt 1 ]; then
				core_exitError $core_commandLine_exitCode_USAGE "Please specify one of start or stop"
			fi
			
			case "$1" in
				
				start|stop)
					pxe_action=${actionMajor}_$1
					shift 1
				;;
				
				*)
					core_exitError $core_commandLine_exitCode_USAGE "Please specify one of start or stop"
				;;
				
			esac
		;;
		
		httpd)
			local actionMajor="$1"
			shift 1
			
			if [ $# -lt 1 ]; then
				core_exitError $core_commandLine_exitCode_USAGE "Please specify one of start or stop"
			fi
			
			case "$1" in
				
				start|stop)
					pxe_action=${actionMajor}_$1
					shift 1
				;;
				
				*)
					core_exitError $core_commandLine_exitCode_USAGE "Please specify one of start or stop"
				;;
				
			esac
		;;
		
		start|stop|restart)
			pxe_action=all_"$1"
			shift 1
		;;
		
		x509|new_client_certificate)
			pxe_action="$1"
			shift 1
		;;
		
		nbp_create)
			pxe_action="$1"
			shift 1
			
			pxe_nbp_create_clean_default=false
			
			_program_commandLine_optionExists()
			{
				case "$optionName" in
					
					c|clean)
						echo 'yes-optionally-argumented'
					;;
					
					*)
						echo 'no'
					;;
					
				esac
			}
			
			_program_commandLine_processOptionWithoutArgument()
			{
				case "$optionName" in
					
					c|clean)
						pxe_nbp_create_clean=true
					;;
					
				esac
			}
			
			_program_commandLine_processOptionWithArgument()
			{
				case "$optionName" in
					
					c|clean)
						core_validate_isBoolean $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
						pxe_nbp_create_clean="$optionValue"
					;;
					
				esac
			}
			
			_program_commandLine_validate()
			{
				if core_variable_isUnset pxe_nbp_create_clean; then
					pxe_nbp_create_clean="$pxe_nbp_create_clean_default"
				fi
				core_validate_isBoolean $core_commandLine_exitCode_CONFIG 'configuration setting' 'pxe_nbp_create_clean' "$pxe_nbp_create_clean"
				# Normalise boolean to something that can be used with if $value; then
				if core_variable_isTrue "$pxe_nbp_create_clean"; then
					pxe_nbp_create_clean=true
				elif core_variable_isFalse "$pxe_nbp_create_clean"; then
					pxe_nbp_create_clean=false
				fi
			}
		;;
		
		*)
			core_exitError $core_commandLine_exitCode_USAGE "Unrecognised action '$1'"
		;;
		
	esac
	
	core_commandLine_parsePosix "$@"
}

_program_path_find()
{
    if [ "${_program_fattening_program_path+set}" = 'set' ]; then
        printf '%s\n' "$_program_fattening_program_path"

    elif [ "${0%/*}" = "$0" ]; then

        # We've been invoked by the interpreter as, say, bash program
        if [ -r "$0" ]; then
            pwd -P
        # Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
        else
            printf '\n'
        fi

    else

        # We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

        _program_path_find_parentPath()
        {
            parentPath="${scriptPath%/*}"
            if [ -z "$parentPath" ]; then
                parentPath='/'
            fi
            cd "$parentPath" 1>/dev/null
        }

        # pdksh / mksh have problems with unsetting a variable that was never set...
        if [ "${CDPATH+set}" = 'set' ]; then
            unset CDPATH
        fi

        if command -v realpath 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$(realpath "$0")"

                _program_path_find_parentPath
                pwd -P
            )
        elif command -v readlink 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$0"

                while [ -L "$scriptPath" ]
                do
                    _program_path_find_parentPath
                    scriptPath="$(readlink "$scriptPath")"
                done

                _program_path_find_parentPath
                pwd -P
            )
        else
            # This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
            (
                scriptPath="$0"

                _program_path_find_parentPath
                pwd -P
            )
        fi

    fi
}

_program_name='pxe'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$(_program_path_find)"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='pxe'


# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"