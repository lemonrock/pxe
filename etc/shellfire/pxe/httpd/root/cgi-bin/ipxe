#!/usr/bin/env sh

set -e
set -f

# QUERY_STRING environment variable should be set; we should also be able to verify REMOTE_ADDR and REQUEST_METHOD=GET and CONTENT_TYPE
# REMOTE_ADDR should be enough to serve up a kernel / initrd and set command line options

print_header()
{
	local headerName="$1"
	local headerValue="$2"
	
	printf '%s:%s\n' "$headerName:$headerValue"
}

print_header_contentType()
{
	print_header "Content-Type" "$1"
}

print_header_status_ok()
{
	print_header "Status" "200 OK"
}

print_header_status_notFound()
{
	print_header "Status" "404 Not Found"
}

print_header_status_methodNotAllowed()
{
	print_header "Status" "405 Method Not Allowed"
}

print_header_status_payloadTooLarge()
{
	print_header "Status" "413 Payload Too Large"
}

print_header_status_unsupportedMediaType()
{
	print_header "Status" "415 Unsupported Media Type"
}

print_header_status_unimplemented()
{
	print_header "Status" "501 Unimplemented"
}

return_empty()
{
	local status="$1"
	
	print_header_contentType "text/plain;charset=utf-8"
	print_header_status_$status
	printf '\n'
	exit 0
}

return_plaintext()
{
	local content="$1"
	
	print_header_contentType "text/plain;charset=utf-8"
	print_header_status_ok
	printf '\n%s' "$content"
	exit 0
}

validate_GATEWAY_INTERFACE()
{
	if [ "$GATEWAY_INTERFACE" != "CGI/1.1" ]; then
		return_empty unimplemented
	fi
}

validate_SERVER_PROTOCOL()
{
	case "$SERVER_PROTOCOL" in
	
		'INCLUDED')
			return_empty unimplemented
		;;
	
		'HTTP/1.0'|'HTTP/1.1')
			:
		;;
	
		*)
			return_empty unimplemented
		;;
	
	esac
}

validate_requestIsGet()
{
	if [ "$REQUEST_METHOD" != 'GET' ]; then
		return_empty methodNotAllowed
	fi
}

validate_thereIsNoQueryString()
{
	if [ -n "$QUERY_STRING" ]; then
		return_empty notFound
	fi
}

validate_thereIsNoContentType()
{
	if [ -n "$_CONTENT_TYPE" ]; then
		return_empty unsupportedMediaType
	fi
}

validate_thereIsNoRequestMessageBody()
{
	if [ $_CONTENT_LENGTH -ne 0 ]; then
		return_empty payloadTooLarge
	fi
}

assign_unsetCgiVariablesToSensibleDefaults()
{
	_PATH_TRANSLATED="${PATH_TRANSLATED:-}"
	_REMOTE_HOST="${REMOTE_HOST:-}"
	_CONTENT_TYPE="${CONTENT_TYPE:-}"
	_CONTENT_LENGTH="${CONTENT_LENGTH:-0}"
}

init()
{
	validate_GATEWAY_INTERFACE
	validate_SERVER_PROTOCOL
	assign_unsetCgiVariablesToSensibleDefaults
}

execute_ipxe()
{
	validate_requestIsGet
	
	validate_thereIsNoQueryString
	
	validate_thereIsNoContentType
	
	validate_thereIsNoRequestMessageBody

	return_plaintext "#!ipxe
chain http://boot.ipxe.org/demo/boot.php
"
}

main()
{
	init
	
	case "${SCRIPT_NAME}${PATH_INFO}" in
		
		'/cgi-bin/ipxe')
			execute_ipxe
		;;
	
		*)
			return_empty notFound
		;;
	
	esac
}

main "$@"
