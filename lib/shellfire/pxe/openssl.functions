# This file is part of pxe. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/pxe/master/COPYRIGHT. No part of pxe, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of pxe. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/pxe/master/COPYRIGHT.


pxe_openssl_prompt()
{
	local kind="$1"
	printf '%s\n' "Please enter a 4 - 1023 character password for a $kind Private Key"
}

pxe_openssl_signCode()
{
	local codeFilePath="$1"
	
	_pxe_openssl cms -sign -binary -noattr -in "$codeFilePath" -signer "$pxe_certificatesFolderPath"/code-signing.crt -inkey "$pxe_certificatesFolderPath"/code-signing.key \
		-certfile "$pxe_certificateAuthorityCertFilePath" -outform DER -out "$codeFilePath".sig
}

core_dependency_requires '*' mkdir cat rm chmod
pxe_openssl_new_request()
{
	local requestBaseName="$1"
	local subjectAltNamesCommaSeparated="$2"
	shift 2
	
	local csrFilePath="$pxe_certificatesFolderPath"/"$requestBaseName".csr
	local keyFilePath="$pxe_certificatesFolderPath"/"$requestBaseName".key
	
	if core_path_isReadableNonEmptyFilePath "$csrFilePath"; then
		core_message INFO "Certificate signing request for '$requestBaseName' already exists at '$csrFilePath'"
		if core_path_isReadableNonEmptyFilePath "$keyFilePath"; then
			core_message INFO "Private key for '$requestBaseName' also exists at '$keyFilePath'"
		fi
		return 0
	fi
	
	if core_path_isReadableNonEmptyFilePath "$keyFilePath"; then
		core_message INFO "Private key for '$requestBaseName' already exists at '$keyFilePath'"
		return 0
	fi
	
	mkdir -m 0700 -p "$pxe_certificatesFolderPath"
	
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	local temporaryConfFile="$TMP_FILE"
	{
		cat "$pxe_openSslCertificateAuthorityCnfFilePath"
		printf '\n'
		printf '%s\n' '[ subject_alt_name ]'
		printf '%s\n' "subjectAltName=$subjectAltNamesCommaSeparated"
	} >"$temporaryConfFile"
		
	pxe_openssl_prompt "$requestBaseName"
	(
		export pxe_certificateAuthorityFolderPath="$pxe_certificateAuthorityFolderPath"
    	_pxe_openssl req -sha256 -reqexts subject_alt_name -config "$temporaryConfFile" -newkey rsa:4096 -out "$csrFilePath" -keyout "$keyFilePath" "$@"
	)
	rm -rf "$temporaryConfFile"
	
	chmod 0400 "$csrFilePath" "$keyFilePath"
}

core_dependency_requires '*' chmod
pxe_openssl_ca_sign()
{
	local requestBaseName="$1"
	shift 1
	
	local certificateFilePath="$pxe_certificatesFolderPath"/"$requestBaseName".crt
	if core_path_isReadableNonEmptyFilePath "$certificateFilePath"; then
		core_message INFO "Certificate for '$requestBaseName' already exists at '$certificateFilePath'"
		return 0
	fi
	
	pxe_openssl_ca -in "$pxe_certificatesFolderPath"/"$requestBaseName".csr -out "$pxe_certificatesFolderPath"/"$requestBaseName".crt "$@"
	chmod 0400 "$pxe_certificatesFolderPath"/"$requestBaseName".crt
}

pxe_openssl_ca_crossSign()
{
	local inCertificateFilePath="$1"
	local outCertificateFilePath="$2"
	shift 2
	
	pxe_openssl_ca -extensions cross -notext -preserveDN -ss_cert "$inCertificateFilePath" -out "$outCertificateFilePath" "$@"
}

pxe_openssl_ca()
{
	(
		export pxe_certificateAuthorityFolderPath="$pxe_certificateAuthorityFolderPath"
		_pxe_openssl ca -md sha256 -config "$pxe_openSslCertificateAuthorityCnfFilePath" "$@"
	)
}

pxe_openssl_removePassPhrase()
{
	local inputKeyFilePath="$1"
	local outputKeyFilePath="$2"
	
	openssl rsa -in "$inputKeyFilePath" -out "$outputKeyFilePath" 2>/dev/null
}

core_dependency_requires '*' rm
pxe_openssl_clean()
{
	set +f
	rm -rf "$pxe_certificateAuthorityFolderPath"/*.old "$pxe_certificateAuthorityFolderPath"/*.pem
	set -f
}

core_dependency_requires '*' openssl
_pxe_openssl()
{
	_pxe_openssl_verifyCertificateAuthority
	
	openssl "$@"
}

_pxe_openssl_verifyCertificateAuthority()
{
	if ! core_path_isReadableAndSearchableFolderPath "$pxe_certificateAuthorityFolderPath"; then
		core_exitError $core_commandLine_exitCode_UNAVAILABLE "Please ensure '$pxe_certificateAuthorityFolderPath' exists and is readable and searchable"
	fi

	if ! core_path_isReadableNonEmptyFilePath "$pxe_certificateAuthorityFolderPath"/private-pxe-certificate-authority.crt; then
		core_exitError $core_commandLine_exitCode_UNAVAILABLE "Private PXE Certificate Authority unavailable (unreadable root crt)"
	fi

	if ! core_path_isReadableNonEmptyFilePath "$pxe_certificateAuthorityFolderPath"/private-pxe-certificate-authority.key; then
		core_exitError $core_commandLine_exitCode_UNAVAILABLE "Private PXE Certificate Authority unavailable (unreadable private key)"
	fi

	if ! core_path_isReadableNonEmptyFilePath "$pxe_certificateAuthorityFolderPath"/private-pxe-certificate-authority.srl; then
		core_exitError $core_commandLine_exitCode_UNAVAILABLE "Private PXE Certificate Authority unavailable (unreadable serial file)"
	fi

	if ! core_path_isReadableNonEmptyFilePath "$pxe_certificateAuthorityFolderPath"/private-pxe-certificate-authority.idx; then
		core_exitError $core_commandLine_exitCode_UNAVAILABLE "Private PXE Certificate Authority unavailable (unreadable index)"
	fi

	if ! core_path_isReadableNonEmptyFilePath "$pxe_openSslCertificateAuthorityCnfFilePath"; then
		core_exitError $core_commandLine_exitCode_UNAVAILABLE "Private PXE Certificate Authority unavailable (no cnf file)"
	fi
}
