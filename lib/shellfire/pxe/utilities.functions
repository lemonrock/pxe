# This file is part of pxe. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/pxe/master/COPYRIGHT. No part of pxe, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of pxe. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/pxe/master/COPYRIGHT.


core_dependency_requires '*' env
pxe_utilities_runLongLived()
{
	env -i PATH="/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" LC_ALL="en_US.UTF-8" "$@"
}

core_dependency_requires '*' head rm
pxe_utilities_signal()
{
	local program="$1"
	local signal="$2"
	local removePidFile="$3"
	
	local pidFilePath="$_program_varPath"/run/"$program".pid
	
	if ! core_path_isReadableNonEmptyFilePath "$pidFilePath"; then
		core_exitError $core_commandLine_exitCode_NOINPUT "There is no $program pid file at '$pidFilePath'"
	fi
	
	local pid="$(head -n 1 "$pidFilePath")"
	set +e
	kill -"$signal" "$pid"
	local exitCode=$?
	set -e
	
	if [ $exitCode -ne 0 ]; then
		core_exitError $core_commandLine_exitCode_CONFIG "Could not send signal '$signal' to $program at pid '$pid' from pid file '$pidFilePath'"
	fi
	
	if $removePidFile; then
		rm -rf "$pidFilePath"
	fi
}

core_usesIn pxe crypto
core_dependency_requires '*' grep id make git rm mv
core_dependency_requires '*' perl gcc ld ar rm
# Effectively, add or update client...
pxe_utilities_prepareIPxe()
{
	# clientId is probably best utilised as 'hostname'
	local clientId="$1"
	
	pxe_alpine_installPackages alpine-sdk perl xz-dev
	
	# TODO: Get the vmlinuz image for this client if set up...
	
	pxe_crypto_signCode "$pxe_httpdFolderPath"/boot/vmlinuz."$clientId"
	
	# TODO: Or replace. Or ignore if present.
	pxe_crypto_generateNewClientAuthenticationCertificate "$clientId"

	local iPxeFolderPath="$_program_etcPath"/shellfire/pxe/iPXE
	local currentIPxeFolderPath="$iPxeFolderPath"/current
		
	pushd "$currentIPxeFolderPath"
		
		make clean 1>/dev/null 2>/dev/null || true
		git reset --hard --quiet
		git clean -d --force --quiet -x
		
		pushd src
		
			make bin/undionly."$clientId".kpxe 1>/dev/null 2>/dev/null EMBED="$iPxeFolderPath"/embed.ipxe CERT="$pxe_certificateAuthorityCertFilePath","$pxe_certificatesFolderPath"/"$clientId".client.crt TRUST="$pxe_certificateAuthorityCertFilePath" PRIVKEY="$pxe_certificatesFolderPath"/"$clientId".client.key
		
		popd
		
		rm -rf "$pxe_ipxe_destinationFolderPath"/undionly.kpxe
		mv "$currentIPxeFolderPath"/src/bin/undionly.kpxe "$pxe_ipxe_destinationFolderPath"
		
		make clean 1>/dev/null 2>/dev/null || true
		git reset --hard --quiet
		git clean -d --force --quiet -x
		
	popd
}
